custom_options: |
    if(DONT_GET_PARENT_AND_CHILD_TAGS_FROM_IDS)
        set(GET_PARENT_AND_CHILD_TAGS_FROM_IDS__VALUE "false")
    else()
        set(GET_PARENT_AND_CHILD_TAGS_FROM_IDS__VALUE "true")
    endif()
    if(n_cached)
        target_compile_definitions(server PRIVATE "n_cached=${n_cached}")
    endif()
    set(MAX_CACHE_AGE "0" CACHE STRING "Maximum age - in seconds - of the HTML and AJAX in the browser cache")
    set(SERVER_ROOT_URL "" CACHE STRING "Root path of the server")
    set(TABLE_LIMIT "100" CACHE STRING "Maximum number of entries in file, tag, dir tables")

required_packages: []

library_names:
    CURL:
        - curl
        - curl.a libcurl.a
    FFMPEGTHUMBNAILER:
        - ffmpegthumbnailer
        - ffmpegthumbnailer.a libffmpegthumbnailer.a

custom_vars: |
    set(PROJECT_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../include")

server_sources: |
    "${SRC_DIR}/qry.cpp"

server_includes: |
    "${PROJECT_INCLUDE_DIR}"

server_linked_libs: >
    "${CURL}" "${FFMPEGTHUMBNAILER}"

server_required_actions: |
    target_compile_definitions(server PRIVATE "MAX_CACHE_AGE=\"${MAX_CACHE_AGE}\"")

wget_and_escapes_required_by_server:
    ${SRC_DIR}/static/js/3rd-party/php-date-formatter.js:
        https://raw.githubusercontent.com/kartik-v/php-date-formatter/master/js/php-date-formatter.min.js
    ${SRC_DIR}/static/js/3rd-party/datetimepicker.js:
        https://raw.githubusercontent.com/xdan/datetimepicker/master/jquery.datetimepicker.js
    ${SRC_DIR}/static/css/3rd-party/datetimepicker.css:
        https://raw.githubusercontent.com/xdan/datetimepicker/master/jquery.datetimepicker.css

custom_targets: |
    add_executable(qry "${SRC_DIR}/qry-cli.cpp" "${SRC_DIR}/qry.cpp")
    set_property(TARGET qry PROPERTY CXX_STANDARD 17)
    target_include_directories(qry PRIVATE "${COMPSKY_INCLUDE_DIRS}")
    target_compile_definitions(qry PRIVATE DEBUG)
    add_custom_target(
        qry__process_arg__tokens ALL
        DEPENDS "${SRC_DIR}/server-endpoints.txt" # CMake does not seem to have an option to only rerun when dependency is modified
        COMMAND ${PYTHON_EXECUTABLE} "${SCRIPTS_DIR}/triegen.py" "${SRC_DIR}/qry-process_arg-tokens.txt" "${AUTO_SRC_DIR}/qry-process_arg-tokens.hpp"
        BYPRODUCTS "${AUTO_SRC_DIR}/qry-process_arg-tokens.hpp"
        COMMENT "Generating bigboi switch statement"
    )
    add_custom_target(
        qry__get_attribute_name__tokens ALL
        DEPENDS "${SRC_DIR}/server-endpoints.txt" # CMake does not seem to have an option to only rerun when dependency is modified
        COMMAND ${PYTHON_EXECUTABLE} "${SCRIPTS_DIR}/triegen.py" "${SRC_DIR}/qry-get_attribute_name-tokens.txt" "${AUTO_SRC_DIR}/qry-get_attribute_name-tokens.hpp"
        BYPRODUCTS "${AUTO_SRC_DIR}/qry-get_attribute_name-tokens.hpp"
        COMMENT "Generating bigboi switch statement"
    )

server_compile_defs:
    - |
        "TABLE_LIMIT=\"${TABLE_LIMIT}\""
    - |
        "SERVER_ROOT_URL=\"${SERVER_ROOT_URL}\""
    - |
        "GET_PARENT_AND_CHILD_TAGS_FROM_IDS=\"${GET_PARENT_AND_CHILD_TAGS_FROM_IDS__VALUE}\""

misc: |
    if(PREPOPULATE_T_TBL_FROM_IDS)
        target_compile_definitions(server PRIVATE PREPOPULATE_T_TBL_FROM_IDS="\\\"${PREPOPULATE_T_TBL_FROM_IDS}\\\"")
    endif()
    if(PREPOPULATE_D_TBL_FROM_IDS)
        target_compile_definitions(server PRIVATE PREPOPULATE_D_TBL_FROM_IDS="\\\"${PREPOPULATE_D_TBL_FROM_IDS}\\\"")
    endif()
    if(PREPOPULATE_F_TBL_FROM_IDS)
        # WARNING: An input value of "'0'" counts as false...
        target_compile_definitions(server PRIVATE PREPOPULATE_F_TBL_FROM_IDS="\\\"${PREPOPULATE_F_TBL_FROM_IDS}\\\"")
        # Why so many escapes? Not sure, but it works.
    endif()
    if(SELECT2_URL_ENDPOINT)
        target_compile_definitions(server PRIVATE "SELECT2_URL_ENDPOINT=\"${SELECT2_URL_ENDPOINT}\"")
        # WARNING: This string must not contain a semi-colon, because CMake interprets that as delineating an array
    endif()
    add_dependencies(qry qry__process_arg__tokens qry__get_attribute_name__tokens)

server_dependencies: >
    qry__process_arg__tokens qry__get_attribute_name__tokens
