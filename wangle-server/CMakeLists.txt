# Automatically generated by wangler.py (Copyright Adam Gray 2020 GPLv3 etc.)

cmake_minimum_required(VERSION 3.9) # CMP0069 NEW

# If you have installed Proxygen, you can use
# cmake -Dproxygen_root_DIR=/path/to/proxygen/root/dir

if(proxygen_root_DIR)
	set(proxygen_cmake_DIR "${proxygen_root_DIR}/proxygen/_build/deps/lib/cmake")
	
	if(NOT wangle_DIR)
		set(wangle_DIR "${proxygen_cmake_DIR}/wangle")
	endif()
	
	if(NOT folly_DIR)
		set(folly_DIR "${proxygen_cmake_DIR}/folly")
	endif()
	
	if(NOT fizz_DIR)
		set(fizz_DIR "${proxygen_cmake_DIR}/fizz")
	endif()
else()
	message(WARNING "You might want to define -Dproxygen_root_DIR=/path/to/proxygen/root for ease - defines proxygen_cmake_DIR, wangle_DIR, folly_DIR and fizz_DIR")
endif()

set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Build Type")
option(EMBED_PYTHON "Allows the use of embedded Python, instead of relying on forking the process to call external Python programs" OFF)
option(MANGLE_JS_NAMES "Minimise the names of JavaScript functions and variables" OFF)
option(DISPLAY_LICENSES_INLINE "Display static component licenses inline" ON)
option(ENABLE_STATIC "Build static executable, rather than linked" OFF)
option(ENABLE_LIMIT_WITHIN_GROUP_CONCAT "Allow the use of LIMIT statements within GROUP_CONCAT functions, disabling the workaround. Currently only MariaDB servers have fixed this bug, while all official MySQL versions require the workaround." OFF)
option(BUILD_TESTS "Run compile-time tests" OFF)
if(DONT_GET_PARENT_AND_CHILD_TAGS_FROM_IDS)
    set(GET_PARENT_AND_CHILD_TAGS_FROM_IDS__VALUE "false")
else()
    set(GET_PARENT_AND_CHILD_TAGS_FROM_IDS__VALUE "true")
endif()
if(n_cached)
    target_compile_definitions(server PRIVATE "n_cached=${n_cached}")
endif()
set(MAX_CACHE_AGE "0" CACHE STRING "Maximum age - in seconds - of the HTML and AJAX in the browser cache")
set(SERVER_ROOT_URL "" CACHE STRING "Root path of the server")
set(TABLE_LIMIT "100" CACHE STRING "Maximum number of entries in file, tag, dir tables")

if(MANGLE_JS_NAMES)
	set(MANGLE_JS_NAMES_ARGS "--mangle")
else()
	set(MANGLE_JS_NAMES_ARGS "")
endif()

if(BUILD_TESTS)
	target_compile_definitions(server PRIVATE TESTS)
endif()

find_package(fizz REQUIRED)
find_package(Threads REQUIRED)
find_package(folly REQUIRED)
find_package(wangle REQUIRED)
find_package(gflags REQUIRED)
find_package(Compsky REQUIRED)

if(ENABLE_STATIC)
	set(CURL_NAMES curl.a libcurl.a)
set(FFMPEGTHUMBNAILER_NAMES ffmpegthumbnailer.a libffmpegthumbnailer.a)
set(MYSQL_CLIENT_NAMES mariadbclient.a libmariadbclient.a mariadb/mariadbclient.a mariadb/libmariadbclient.a mysqlclient.a libmysqlclient.a mysql/mysqlclient.a mysql/libmysqlclient.a)
else()
	set(CURL_NAMES curl)
set(FFMPEGTHUMBNAILER_NAMES ffmpegthumbnailer)
set(MYSQL_CLIENT_NAMES mariadbclient mysqlclient)
endif()
find_library(CURL NAMES ${CURL_NAMES})
find_library(FFMPEGTHUMBNAILER NAMES ${FFMPEGTHUMBNAILER_NAMES})
find_library(MYSQL_CLIENT NAMES ${MYSQL_CLIENT_NAMES})

set(SRC_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src")
set(SCRIPTS_DIR "${CMAKE_CURRENT_SOURCE_DIR}/scripts")
set(AUTO_SRC_DIR "${SRC_DIR}/auto-generated")
set(PROJECT_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../include")


file(MAKE_DIRECTORY "${AUTO_SRC_DIR}")
# Creates directory during build system generation

add_executable(
	server
	"${SRC_DIR}/server.cpp"
	"${SRC_DIR}/qry.cpp"
	"${SRC_DIR}/curl_utils.cpp"
	"${SRC_DIR}/db_info.cpp"
	"${SRC_DIR}/initialise_tagem_db.cpp"
	
)
include(CheckIPOSupported)
check_ipo_supported(RESULT is_ipo_supported)
if(is_ipo_supported)
	set_target_properties(
		server
		PROPERTIES
			CXX_STANDARD 17
			INTERPROCEDURAL_OPTIMIZATION TRUE
			LINK_FLAGS_RELEASE -s
	)
endif()
target_include_directories(server PRIVATE "${WANGLE_INCLUDE_DIR}" "${COMPSKY_INCLUDE_DIRS}" "${PROJECT_INCLUDE_DIR}"
)
target_link_libraries(server PRIVATE "${MYSQL_CLIENT}" wangle::wangle "${CURL}" "${FFMPEGTHUMBNAILER}"
)

target_compile_definitions(server PRIVATE "MAX_CACHE_AGE=\"${MAX_CACHE_AGE}\"")
if(EMBED_PYTHON)
	target_include_directories(server PRIVATE "/usr/include/python3.8") # TODO: Generalise
	target_compile_definitions(server PRIVATE "PYTHON=1")
	if(ENABLE_STATIC)
		set(LIBPYTHON_NAMES "python3.8.a" "libpython3.8.a" "python3.7.a" "libpython3.7.a" "python3.6.a" "libpython3.6.a")
	else()
		set(LIBPYTHON_NAMES "python3.8" "python3.7" "python3.6" "python3.5") # WARNING: I have not tested any versions prior to python3.8
	endif()
	find_library(LIBPYTHON NAMES ${LIBPYTHON_NAMES})
	target_link_libraries(server PRIVATE "${LIBPYTHON}")
endif()
if(ENABLE_LIMIT_WITHIN_GROUP_CONCAT)
	target_compile_definitions(server PRIVATE LIMITS_WITHIN_GROUP_CONCATS)
endif()


add_custom_target(
	auto__server_determine_response_hpp ALL
	DEPENDS "${SRC_DIR}/server-endpoints.txt" # CMake does not seem to have an option to only rerun when dependency is modified
	COMMAND ${PYTHON_EXECUTABLE} "${SCRIPTS_DIR}/triegen.py" "${SRC_DIR}/server-endpoints.txt" "${AUTO_SRC_DIR}/auto__server-determine-response.hpp"
	BYPRODUCTS "${AUTO_SRC_DIR}/auto__server-determine-response.hpp"
	COMMENT "Generating bigboi switch statement"
)

add_custom_target(
	js_hpp ALL
	COMMAND ${PYTHON_EXECUTABLE} "${SCRIPTS_DIR}/minjs.py" "${MANGLE_JS_NAMES_ARGS}" "ALL" "${AUTO_SRC_DIR}/js.hpp" "${SRC_DIR}/static/js/" #"${SRC_DIR}/static/js/3rd-party/datetimepicker.js"
	BYPRODUCTS "${AUTO_SRC_DIR}/js.hpp"
	COMMENT "Generating minimised JavaScript header"
)

add_custom_target(
	svg_hpp ALL
	COMMAND ${PYTHON_EXECUTABLE} "${SCRIPTS_DIR}/svggen.py" "${DISPLAY_LICENSES_INLINE_ARGS}" "${AUTO_SRC_DIR}/svg.hpp" "${SRC_DIR}/html/svg"
	BYPRODUCTS "${AUTO_SRC_DIR}/svg.hpp"
	COMMENT "Generating SVG icons header"
)


			add_custom_target(
				_SRC_DIR_static_js_3rd_party_php_date_formatter_js ALL
				COMMAND "${SCRIPTS_DIR}/wget-and-escape" "${SRC_DIR}/static/js/3rd-party/php-date-formatter.js" "https://raw.githubusercontent.com/kartik-v/php-date-formatter/master/js/php-date-formatter.min.js" 
				BYPRODUCTS "${SRC_DIR}/static/js/3rd-party/php-date-formatter.js"
				COMMENT "Downloading datetimepicker.css"
			)
		

			add_custom_target(
				_SRC_DIR_static_js_3rd_party_datetimepicker_js ALL
				COMMAND "${SCRIPTS_DIR}/wget-and-escape" "${SRC_DIR}/static/js/3rd-party/datetimepicker.js" "https://raw.githubusercontent.com/xdan/datetimepicker/master/jquery.datetimepicker.js" 
				BYPRODUCTS "${SRC_DIR}/static/js/3rd-party/datetimepicker.js"
				COMMENT "Downloading datetimepicker.css"
			)
		

			add_custom_target(
				_SRC_DIR_static_css_3rd_party_datetimepicker_css ALL
				COMMAND "${SCRIPTS_DIR}/wget-and-escape" "${SRC_DIR}/static/css/3rd-party/datetimepicker.css" "https://raw.githubusercontent.com/xdan/datetimepicker/master/jquery.datetimepicker.css" 
				BYPRODUCTS "${SRC_DIR}/static/css/3rd-party/datetimepicker.css"
				COMMENT "Downloading datetimepicker.css"
			)
		

add_executable(qry "${SRC_DIR}/qry-cli.cpp" "${SRC_DIR}/qry.cpp")
set_property(TARGET qry PROPERTY CXX_STANDARD 17)
target_include_directories(qry PRIVATE "${COMPSKY_INCLUDE_DIRS}")
target_compile_definitions(qry PRIVATE DEBUG)
add_custom_target(
    qry__process_arg__tokens ALL
    DEPENDS "${SRC_DIR}/server-endpoints.txt" # CMake does not seem to have an option to only rerun when dependency is modified
    COMMAND ${PYTHON_EXECUTABLE} "${SCRIPTS_DIR}/triegen.py" "${SRC_DIR}/qry-process_arg-tokens.txt" "${AUTO_SRC_DIR}/qry-process_arg-tokens.hpp"
    BYPRODUCTS "${AUTO_SRC_DIR}/qry-process_arg-tokens.hpp"
    COMMENT "Generating bigboi switch statement"
)
add_custom_target(
    qry__get_attribute_name__tokens ALL
    DEPENDS "${SRC_DIR}/server-endpoints.txt" # CMake does not seem to have an option to only rerun when dependency is modified
    COMMAND ${PYTHON_EXECUTABLE} "${SCRIPTS_DIR}/triegen.py" "${SRC_DIR}/qry-get_attribute_name-tokens.txt" "${AUTO_SRC_DIR}/qry-get_attribute_name-tokens.hpp"
    BYPRODUCTS "${AUTO_SRC_DIR}/qry-get_attribute_name-tokens.hpp"
    COMMENT "Generating bigboi switch statement"
)


set(DISPLAY_LICENSES_INLINE_ARGS)
if(DISPLAY_LICENSES_INLINE)
	set(DISPLAY_LICENSES_INLINE_ARGS "--display-licences")
endif()

if(PREPOPULATE_T_TBL_FROM_IDS)
    target_compile_definitions(server PRIVATE PREPOPULATE_T_TBL_FROM_IDS="\\\"${PREPOPULATE_T_TBL_FROM_IDS}\\\"")
endif()
if(PREPOPULATE_D_TBL_FROM_IDS)
    target_compile_definitions(server PRIVATE PREPOPULATE_D_TBL_FROM_IDS="\\\"${PREPOPULATE_D_TBL_FROM_IDS}\\\"")
endif()
if(PREPOPULATE_F_TBL_FROM_IDS)
    # WARNING: An input value of "'0'" counts as false...
    target_compile_definitions(server PRIVATE PREPOPULATE_F_TBL_FROM_IDS="\\\"${PREPOPULATE_F_TBL_FROM_IDS}\\\"")
    # Why so many escapes? Not sure, but it works.
endif()
if(SELECT2_URL_ENDPOINT)
    target_compile_definitions(server PRIVATE "SELECT2_URL_ENDPOINT=\"${SELECT2_URL_ENDPOINT}\"")
    # WARNING: This string must not contain a semi-colon, because CMake interprets that as delineating an array
endif()
add_dependencies(qry qry__process_arg__tokens qry__get_attribute_name__tokens)


add_dependencies(server auto__server_determine_response_hpp js_hpp svg_hpp qry__process_arg__tokens qry__get_attribute_name__tokens
 _SRC_DIR_static_js_3rd_party_php_date_formatter_js _SRC_DIR_static_js_3rd_party_datetimepicker_js _SRC_DIR_static_css_3rd_party_datetimepicker_css)

target_compile_definitions(server PRIVATE "TABLE_LIMIT=\"${TABLE_LIMIT}\""
)
target_compile_definitions(server PRIVATE "SERVER_ROOT_URL=\"${SERVER_ROOT_URL}\""
)
target_compile_definitions(server PRIVATE "GET_PARENT_AND_CHILD_TAGS_FROM_IDS=\"${GET_PARENT_AND_CHILD_TAGS_FROM_IDS__VALUE}\""
)
